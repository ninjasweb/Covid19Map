{"ast":null,"code":"var _jsxFileName = \"c:\\\\AR\\\\Proyectos\\\\Covid Colombia\\\\covidmap\\\\src\\\\index.js\";\nimport React, { Component, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\nimport quizService from \"./quizService\";\nimport QuestionBox from \"./components/QuestionBox\";\nimport Result from \"./components/Result\";\nimport Inicio from \"./components/Inicio\";\nimport Footer from \"./components/Footer\";\nconst API_KEY = \"AIzaSyAoqNSoiv1sNNZ_FnlPLNMz1jYaPCYefkU\";\n\nclass CovidTest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionBank: [],\n      score: 0,\n      responses: 0,\n      inicio: false,\n      lat: null,\n      lon: null,\n      latlon: null,\n      address: null\n    };\n\n    this.showshow = getCoordinates => {\n      this.setState({\n        inicio: true\n      });\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(getCoordinates);\n      } else {\n        alert(\"Tu navegador no soporta la GeolocalizaciÃ³n\");\n      }\n\n      console.log(\"Obteniendo Coordenadas...\"); //Obtener Coordenadas\n\n      getCoordinates = position => {\n        console.log(position.coords.longitude);\n        console.log(position.coords.latitude);\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      };\n    };\n\n    this.showMap = () => {\n      var latlon = this.state.lat + \",\" + this.state.lon;\n      var img_url = \"https://maps.googleapis.com/maps/api/staticmap?center=\" + latlon + \"&zoom=17&size=400x300&sensor=false&key=AIzaSyAoqNSoiv1sNNZ_FnlPLNMz1jYaPCYefkU\";\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: img_url,\n        alt: \"Mapa\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 4\n        }\n      });\n    };\n\n    this.getQuestions = inicio => {\n      quizService().then(question => {\n        this.setState({\n          questionBank: question\n        });\n      });\n    };\n\n    this.computeAnswer = (answer, puntaje) => {\n      if (answer === \"SI\") {\n        this.setState({\n          score: this.state.score + puntaje\n        });\n      }\n\n      this.setState({\n        responses: this.state.responses < 8 ? this.state.responses + 1 : 8\n      });\n    };\n\n    this.playAgain = () => {\n      this.getQuestions();\n      this.setState({\n        score: 0,\n        responses: 0\n      });\n    };\n\n    this.publicarSintomas = (valoracion, ubicacion) => {\n      valoracion = this.state.score;\n      ubicacion = this.state.lat + \",\" + this.state.lon;\n      alert(valoracion + \",\" + ubicacion);\n    };\n  }\n\n  //Ciclo de vida\n  componentDidMount() {\n    this.getQuestions();\n  } // Agregar debajo de content <div className=\"title\">AUTO-TEST COVID-19 (SARS-COV-2)</div>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 4\n      }\n    }, this.state.inicio === false ? /*#__PURE__*/React.createElement(Inicio, {\n      inicio: this.state.inicio,\n      showshow: this.showshow,\n      getCoordinates: this.getCoordinates,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 37\n      }\n    }) : null, this.state.inicio === true && this.state.questionBank.length > 0 && this.state.responses < 8 && this.state.questionBank.map(({\n      question,\n      answers,\n      puntaje,\n      questionId\n    }) => /*#__PURE__*/React.createElement(QuestionBox, {\n      question: question,\n      options: answers,\n      key: questionId,\n      selected: answer => this.computeAnswer(answer, puntaje),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 6\n      }\n    })), this.state.responses === 8 ? /*#__PURE__*/React.createElement(Result, {\n      score: this.state.score,\n      playAgain: this.playAgain,\n      publicarSintomas: this.publicarSintomas,\n      lat: this.state.lat,\n      lon: this.state.lon,\n      latlon: this.state.latlon,\n      showMap: this.showMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 36\n      }\n    }) : null)), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 4\n      }\n    }));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(CovidTest, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 18\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["c:/AR/Proyectos/Covid Colombia/covidmap/src/index.js"],"names":["React","Component","Fragment","ReactDOM","quizService","QuestionBox","Result","Inicio","Footer","API_KEY","CovidTest","state","questionBank","score","responses","inicio","lat","lon","latlon","address","showshow","getCoordinates","setState","navigator","geolocation","getCurrentPosition","alert","console","log","position","coords","longitude","latitude","showMap","img_url","getQuestions","then","question","computeAnswer","answer","puntaje","playAgain","publicarSintomas","valoracion","ubicacion","componentDidMount","render","length","map","answers","questionId","document","getElementById"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/style.css\";\r\nimport quizService from \"./quizService\";\r\nimport QuestionBox from \"./components/QuestionBox\";\r\nimport Result from \"./components/Result\";\r\nimport Inicio from \"./components/Inicio\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nconst API_KEY = \"AIzaSyAoqNSoiv1sNNZ_FnlPLNMz1jYaPCYefkU\";\r\n\r\n\r\n\r\nclass CovidTest extends Component {\r\n\r\n\r\n\tstate = {\r\n\t\tquestionBank: [],\r\n\t\tscore: 0,\r\n\t\tresponses: 0,\r\n\t\tinicio: false,\r\n\t\tlat: null,\r\n\t\tlon: null,\r\n\t\tlatlon: null,\r\n\t\taddress: null\r\n\t}\r\n\t;\r\n\r\n\r\n\r\n\t\r\n\t//Iniciar el Test \r\n\tshowshow = (getCoordinates) => {\r\n    \tthis.setState(\r\n\t\t\t{inicio: true\r\n\t\t\t}\r\n\t\t);\r\n\t\tif(navigator.geolocation){\r\n\t\t\tnavigator.geolocation.getCurrentPosition(getCoordinates);\r\n\t\t}\r\n\t\telse {\r\n\t\t\talert(\"Tu navegador no soporta la GeolocalizaciÃ³n\");\r\n\t\t}\r\n\t\tconsole.log(\"Obteniendo Coordenadas...\");\r\n\t\t\t//Obtener Coordenadas\r\n\t\tgetCoordinates = (position) => {\r\n\t\tconsole.log(position.coords.longitude);\r\n\t\tconsole.log(position.coords.latitude);\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tlat: position.coords.latitude,\r\n\t\t\t\tlon: position.coords.longitude\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t}\r\n\r\n\t//Mostrar el Mapa\r\n\tshowMap = () => {\r\n\t\tvar latlon = this.state.lat + \",\" + this.state.lon;\r\n\t\tvar img_url = \"https://maps.googleapis.com/maps/api/staticmap?center=\"+latlon+\"&zoom=17&size=400x300&sensor=false&key=AIzaSyAoqNSoiv1sNNZ_FnlPLNMz1jYaPCYefkU\";\r\n\t\treturn(\r\n\t\t\t<img src={img_url} alt=\"Mapa\"/>\r\n\t\t);\r\n\r\n\t}\r\n\r\n\r\n\t\t\r\n\r\n\r\n\r\n\r\n\t//Obtener las preguntas\r\n\tgetQuestions = (inicio) => {\r\n\t\t\tquizService().then(\r\n\t\t\t\tquestion => {\r\n\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tquestionBank: question\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t}\r\n\r\n\t//Computar la respuesta\r\n\tcomputeAnswer = (answer, puntaje) => {\r\n\t\tif (answer === \"SI\") {\r\n\t\t\tthis.setState(\r\n\t\t\t\t{score: this.state.score + puntaje}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tresponses: this.state.responses < 8 ? this.state.responses + 1 : 8\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t//Jugar de Nuevo\r\n\tplayAgain = () => {\r\n\t\tthis.getQuestions();\r\n\t\tthis.setState({\r\n\t\t\tscore: 0,\r\n\t\t\tresponses: 0\r\n\t\t});\r\n\t}\r\n\r\n\t//Publicar los sÃ­ntomas\r\n\tpublicarSintomas = (valoracion, ubicacion) => {\r\n\t\t\tvaloracion = this.state.score;\r\n\t\t\tubicacion = this.state.lat + \",\" + this.state.lon;\r\n\t\t\talert(valoracion + \",\" + ubicacion);\r\n\t}\r\n\r\n\t\r\n\r\n\t//Ciclo de vida\r\n\tcomponentDidMount(){\r\n\t\tthis.getQuestions();\r\n\t}\r\n\t// Agregar debajo de content <div className=\"title\">AUTO-TEST COVID-19 (SARS-COV-2)</div>\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t{this.state.inicio === false ? (<Inicio\t\r\n\t\t\t\tinicio={this.state.inicio} showshow={this.showshow} getCoordinates={this.getCoordinates}\t/>): null }\r\n\t\t\t\t{this.state.inicio === true && this.state.questionBank.length > 0 &&\r\n\t\t\t\tthis.state.responses < 8 && \r\n\t\t\t\tthis.state.questionBank.map(({question, answers, puntaje, questionId}) => (\r\n\t\t\t\t\t<QuestionBox \r\n\t\t\t\t\tquestion={question} \r\n\t\t\t\t\toptions={answers} \r\n\t\t\t\t\tkey={questionId}\r\n\t\t\t\t\tselected={answer => this.computeAnswer(answer, puntaje)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t{this.state.responses === 8 ? (<Result score={this.state.score} playAgain={this.playAgain} publicarSintomas={this.publicarSintomas} lat={this.state.lat} lon={this.state.lon} latlon={this.state.latlon} showMap={this.showMap} />) : null}\r\n\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t\r\n\t\t\t\r\n\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<Footer/>\r\n\r\n\r\n\r\n\t\t\t</Fragment>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nReactDOM.render( <CovidTest />, document.getElementById(\"root\") );\r\n\r\n"]},"metadata":{},"sourceType":"module"}