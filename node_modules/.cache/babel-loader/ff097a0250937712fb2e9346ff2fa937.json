{"ast":null,"code":"var _jsxFileName = \"c:\\\\AR\\\\Proyectos\\\\Covid Colombia\\\\Covid19Map\\\\src\\\\index.js\";\nimport React, { Component, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\nimport quizService from \"./quizService\";\nimport QuestionBox from \"./components/QuestionBox\";\nimport Result from \"./components/Result\";\nimport Inicio from \"./components/Inicio\";\n\nclass CovidTest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionBank: [],\n      score: 0,\n      responses: 0,\n      inicio: false,\n      lat: null,\n      lon: null,\n      latlon: null,\n      address: null,\n      questionId: null\n    };\n\n    this.showshow = () => {\n      this.setState({\n        inicio: true\n      });\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(this.getCoordinates, this.showError);\n      } else {\n        alert(\"Tu navegador no soporta la Geolocalización\");\n      }\n    };\n\n    this.showError = error => {\n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          alert(\"La usuario denegó la solicitud de geolocalización.\");\n          break;\n\n        case error.POSITION_UNAVAILABLE:\n          alert(\"La información de ubicación no está disponible.\");\n          break;\n\n        case error.TIMEOUT:\n          alert(\"Se agotó el tiempo de espera de la solicitud para obtener la ubicación del usuario.\");\n          break;\n\n        default:\n          alert(\"Ha ocurrido un error\");\n          break;\n      }\n    };\n\n    this.getCoordinates = position => {\n      console.log(position.coords.longitude);\n      console.log(position.coords.latitude);\n      this.setState({\n        lat: position.coords.latitude,\n        lon: position.coords.longitude\n      });\n    };\n\n    this.showMap = () => {\n      var latlon = this.state.lat + \",\" + this.state.lon;\n      var myapi = process.env.REACT_APP_API_KEY;\n      var img_url = 'https://maps.googleapis.com/maps/api/staticmap?center=' + latlon + '&zoom=17&size=400x300&sensor=false&key=' + myapi + '';\n\n      if (this.state.lan === null) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 12\n          }\n        }, \"Sin coordenadas\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"img\", {\n          src: img_url,\n          alt: \"Mapa\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 6\n          }\n        });\n      }\n    };\n\n    this.getQuestions = () => {\n      quizService().then(question => {\n        this.setState({\n          questionBank: question\n        });\n      });\n      this.setState({\n        questionId: this.state.questionId\n      });\n    };\n\n    this.computeAnswer = (answer, puntaje) => {\n      if (answer === \"SI\") {\n        this.setState({\n          score: this.state.score + puntaje\n        });\n      }\n\n      this.setState({\n        responses: this.state.responses < 8 ? this.state.responses + 1 : 8\n      });\n    };\n\n    this.playAgain = () => {\n      this.getQuestions();\n      this.setState({\n        score: 0,\n        responses: 0\n      });\n    };\n\n    this.publicarSintomas = (valoracion, ubicacion) => {\n      console.log(\"Obteniendo Coordenadas...\");\n      valoracion = this.state.score;\n      ubicacion = this.state.lat + \",\" + this.state.lon;\n      alert(valoracion + \",\" + ubicacion);\n    };\n  }\n\n  //Ciclo de vida\n  componentDidMount() {\n    this.getQuestions();\n  } // Agregar debajo de content <div className=\"title\">AUTO-TEST COVID-19 (SARS-COV-2)</div>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 4\n      }\n    }, this.state.inicio === false ? /*#__PURE__*/React.createElement(Inicio, {\n      inicio: this.state.inicio,\n      showshow: this.showshow,\n      getCoordinates: this.getCoordinates,\n      showError: this.showError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    }) : null, this.state.inicio === true && this.state.questionBank.length > 0 && this.state.responses < 8 && this.state.questionBank.map(({\n      question,\n      answers,\n      puntaje,\n      questionId\n    }) => /*#__PURE__*/React.createElement(QuestionBox, {\n      question: question,\n      options: answers,\n      imgId: questionId,\n      key: questionId,\n      selected: answer => this.computeAnswer(answer, puntaje),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 6\n      }\n    })), this.state.responses === 8 ? /*#__PURE__*/React.createElement(Result, {\n      score: this.state.score,\n      playAgain: this.playAgain,\n      publicarSintomas: this.publicarSintomas,\n      lat: this.state.lat,\n      lon: this.state.lon,\n      latlon: this.state.latlon,\n      showMap: this.showMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 36\n      }\n    }) : null, /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 4\n      }\n    })));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(CovidTest, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 18\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["c:/AR/Proyectos/Covid Colombia/Covid19Map/src/index.js"],"names":["React","Component","Fragment","ReactDOM","quizService","QuestionBox","Result","Inicio","CovidTest","state","questionBank","score","responses","inicio","lat","lon","latlon","address","questionId","showshow","setState","navigator","geolocation","getCurrentPosition","getCoordinates","showError","alert","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","position","console","log","coords","longitude","latitude","showMap","myapi","process","env","REACT_APP_API_KEY","img_url","lan","getQuestions","then","question","computeAnswer","answer","puntaje","playAgain","publicarSintomas","valoracion","ubicacion","componentDidMount","render","length","map","answers","document","getElementById"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/style.css\";\r\nimport quizService from \"./quizService\";\r\nimport QuestionBox from \"./components/QuestionBox\";\r\nimport Result from \"./components/Result\";\r\nimport Inicio from \"./components/Inicio\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass CovidTest extends Component {\r\n\r\n\r\n\r\n\tstate = {\r\n\t\tquestionBank: [],\r\n\t\tscore: 0,\r\n\t\tresponses: 0,\r\n\t\tinicio: false,\r\n\t\tlat: null,\r\n\t\tlon: null,\r\n\t\tlatlon: null,\r\n\t\taddress: null,\r\n\t\tquestionId: null\r\n\t}\r\n\t;\r\n\r\n\r\n\t\r\n\t//Iniciar el Test \r\n\r\n\tshowshow = () => {\r\n    \tthis.setState(\r\n\t\t\t{inicio: true\r\n\t\t\t}\r\n\t\t);\r\n\t\tif(navigator.geolocation){\r\n\t\t\tnavigator.geolocation.getCurrentPosition(this.getCoordinates, this.showError);\r\n\t\t}\r\n\t\telse {\r\n\t\t\talert(\"Tu navegador no soporta la Geolocalización\");\r\n\t\t}\r\n\t\t\r\n\r\n\t}\r\n\r\n\t//Mensaje de error\r\n\tshowError = (error) => {\r\n\t\tswitch(error.code) {\r\n\t\t\tcase error.PERMISSION_DENIED:\r\n\t\t\t  alert(\"La usuario denegó la solicitud de geolocalización.\");\r\n\t\t\t  break;\r\n\t\t\tcase error.POSITION_UNAVAILABLE:\r\n\t\t\t  alert(\"La información de ubicación no está disponible.\");\r\n\t\t\t  break;\r\n\t\t\tcase error.TIMEOUT:\r\n\t\t\t  alert(\"Se agotó el tiempo de espera de la solicitud para obtener la ubicación del usuario.\");\r\n\t\t\t  break;\r\n\t\t\t default:\r\n\t\t\t  alert(\"Ha ocurrido un error\");\r\n\t\t\t  break;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\t\t\r\n\t//Obtener Coordenadas\r\n\tgetCoordinates = (position) => {\r\n\t\tconsole.log(position.coords.longitude);\r\n\t\tconsole.log(position.coords.latitude);\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tlat: position.coords.latitude,\r\n\t\t\t\tlon: position.coords.longitude\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t\t//Mostrar el Mapa\r\n\t\tshowMap = () => {\r\n\t\t\tvar latlon = this.state.lat + \",\" + this.state.lon;\r\n\t\t\tvar myapi = process.env.REACT_APP_API_KEY;\r\n\t\t\tvar img_url = 'https://maps.googleapis.com/maps/api/staticmap?center='+latlon+'&zoom=17&size=400x300&sensor=false&key='+myapi+'';\r\n\t\t\tif (this.state.lan === null) {\r\n\t\t\t\treturn(<p>Sin coordenadas</p>);\r\n\t\t\t} \r\n\t\t\telse {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<img src={img_url} alt=\"Mapa\"/>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\r\n\r\n\r\n\t//Obtener las preguntas\r\n\tgetQuestions = () => {\r\n\t\t\tquizService().then(\r\n\t\t\t\tquestion => {\r\n\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tquestionBank: question\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\tthis.setState(\r\n\t\t\t\t{\r\n\t\t\t\t\tquestionId: this.state.questionId\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//Computar la respuesta\r\n\tcomputeAnswer = (answer, puntaje) => {\r\n\t\tif (answer === \"SI\") {\r\n\t\t\tthis.setState(\r\n\t\t\t\t{score: this.state.score + puntaje}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tresponses: this.state.responses < 8 ? this.state.responses + 1 : 8\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t//Jugar de Nuevo\r\n\tplayAgain = () => {\r\n\t\tthis.getQuestions();\r\n\t\tthis.setState({\r\n\t\t\tscore: 0,\r\n\t\t\tresponses: 0\r\n\t\t});\r\n\t}\r\n\r\n\t//Publicar los síntomas\r\n\tpublicarSintomas = (valoracion, ubicacion) => {\r\n\t\tconsole.log(\"Obteniendo Coordenadas...\");\r\n\t\tvaloracion = this.state.score;\r\n\t\tubicacion = this.state.lat + \",\" + this.state.lon;\r\n\t\talert(valoracion + \",\" + ubicacion);\r\n\t}\r\n\r\n\t\r\n\r\n\t//Ciclo de vida\r\n\tcomponentDidMount(){\r\n\t\tthis.getQuestions();\r\n\t}\r\n\t// Agregar debajo de content <div className=\"title\">AUTO-TEST COVID-19 (SARS-COV-2)</div>\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t{this.state.inicio === false ? (<Inicio\r\n\t\t\t\tinicio={this.state.inicio} showshow={this.showshow} getCoordinates={this.getCoordinates} showError={this.showError}\t/>): null }\r\n\t\t\t\t{this.state.inicio === true && this.state.questionBank.length > 0 &&\r\n\t\t\t\tthis.state.responses < 8 && \r\n\t\t\t\tthis.state.questionBank.map(({question, answers, puntaje, questionId}) => (\r\n\t\t\t\t\t<QuestionBox\r\n\t\t\t\t\tquestion={question} \r\n\t\t\t\t\toptions={answers}\r\n\t\t\t\t\timgId={questionId} \r\n\t\t\t\t\tkey={questionId}\r\n\t\t\t\t\tselected={answer => this.computeAnswer(answer, puntaje)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t{this.state.responses === 8 ? (<Result score={this.state.score} playAgain={this.playAgain} publicarSintomas={this.publicarSintomas} lat={this.state.lat} lon={this.state.lon} latlon={this.state.latlon} showMap={this.showMap} />) : null}\r\n\r\n\t\t\t<Footer/>\r\n\t\t\t</div>\r\n\r\n\t\t\t\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t</Fragment>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nReactDOM.render( <CovidTest />, document.getElementById(\"root\") );\r\n\r\n"]},"metadata":{},"sourceType":"module"}